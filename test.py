import json
import fileinput
import os
import struct
import numpy as np
import matplotlib.pyplot as plt
from math import pow

##def  read_data(void):
  ## temp=""
###  C:\\Users\LeeBruce\Desktop\\idkp1-10.txt

def delete_black(FileName):
    file1 = open(FileName, 'r', encoding='utf-8')  # 要去掉空行的文件
    file2 = open("C:\\Users\LeeBruce\Desktop\\idkp1-102.txt", 'w', encoding='utf-8')  # 生成没有空行的文件
    try:
        for line in file1.readlines():
            if line == '\n':
                line = line.strip("\n")
            file2.write(line)
    finally:
        file1.close()
        file2.close()

def CuttingFile():
    temp=""
    f = open("C:\\Users\LeeBruce\Desktop\\idkp1-102.txt", "r", encoding='utf-8')
    temp=f.readline()

    #print(temp)
    lines = f.readlines()
    data_1 = open("C:\\Users\LeeBruce\Desktop\\奇数行.txt", 'w', encoding='utf-8')
    data_2 = open("C:\\Users\LeeBruce\Desktop\\偶数行.txt", 'w', encoding='utf-8')

    num = 0  # 行数-1
    for line in lines:
        if (num % 2) == 0:  # num为偶数说明是奇数行
            print(line.strip(), file=data_1)  # .strip用来删除空行
        else:  # # num为奇数说明是偶数行
            print(line.strip(), file=data_2)
        num += 1
    data_1.close()
    data_2.close()
    f.close()
    f1=open("C:\\Users\LeeBruce\Desktop\\偶数行.txt", 'r', encoding='utf-8')
    d=[30]
    c=[10149]
    block=[]
    profit=[408,921,1329,11,998,1009,104,839,943,299,374,673,703,954,1657,425,950,1375,430,541,971,332,483,815,654,706,1360,956,992,1948,
            408,921,1329,11,998,1009,104,839,943,299,374,673,703,954,1657,425,950,1375,430,541,971,332,483,815,654,706,1360,956,992,1948,228,
            435,663,575,687,1262,470,609,1079,696,907,1603,273,961,1234,281,461,742,54,957,1011,149,258,407,28,90,118,245,949,1194,246,298,544
        ,205,546,751,33,712,745,335,956,1291,163,918,1081,79,671,750,972,991,1963,217,962,1179,380,846,1226,158,671,829,39,701,740,258,577,835,
            5,682,687,300,364,664,105,946,1051,68,675,743,450,465,915,686,697,1383,355,367,722,106,131,237,296,868,1164,621,807,1428,283,428,711
        ,230,573,803,359,772,1131,270,642,912,134,507,641,21,242,263,236,705,941,469,785,1254,196,349,545,405,985,1390,865,988,1853,355,405,760,460
        ,939,1399,142,408,550,291,436,727,644,922,1566,432,890,1322,352,885,1237,139,269,408,10,137,147,593,601,1194,724,764,1488,672,900,1572,892,
            981,1873,597,641,1238,810,996,1806,459,816,1275,416,872,1288,310,945,1255,283,674,957,180,697,877,112,629,741,559,869,1428,79,802,881,164
        ,192,356,323,340,663,333,464,797,472,496,968,234,914,1148,285,691,976,401,513,914,599,755,1354,391,928,1319,244,502,746,541,837,1378,208,970,
            1178,107,449,556,705,887,1592,468,802,1270,444,683,1127,222,958,1180,18,24,42,153,540,693,54,633,687,853,903,1756,399,452,851,108,161,269,
            328,431,759,]
    weight=[508,1021,1321,111,1098,1196,204,939,1107,399,474,719,803,1054,1781,525,1050,1362,530,641,903,432,583,894,754,806,1241,1056,1092,1545,
            508,1021,1321,111,1098,1196,204,939,1107,399,474,719,803,1054,1781,525,1050,1362,530,641,903,432,583,894,754,806,1241,1056,1092,1545,
            328,535,579,675,787,1037,570,709,1171,796,1007,1251,373,1061,1101,381,561,774,154,1057,1198,249,358,446,128,190,288,345,1049,1053,346,
            398,622,305,646,930,133,812,892,435,1056,1406,263,1018,1192,179,771,802,1072,1091,1418,317,1062,1092,480,946,1064,258,771,846,139,801,
            888,358,677,679,105,782,862,400,464,747,205,1046,1133,168,775,839,550,565,727,786,797,1098,455,467,623,206,231,232,396,968,1064,721,907,
            1406,383,528,636,330,673,719,459,872,1316,370,742,846,234,607,737,121,342,372,336,805,1090,569,885,1245,296,449,729,505,1085,1364,965,
            1088,1510,455,505,758,560,1039,1363,242,508,642,391,536,855,744,1022,1231,532,990,992,452,985,1021,239,369,450,110,237,264,693,701,1176,
            824,864,1288,772,1000,1062,992,1081,1395,697,741,899,910,1096,1919,559,916,1296,516,972,1077,410,1045,1302,383,774,809,280,797,927,212,
            729,923,659,969,1065,179,902,1010,264,292,441,423,440,450,433,564,826,572,596,1057,334,1014,1148,385,791,1019,501,613,625,699,855,1289,
            491,1028,1381,344,602,609,641,937,1311,308,1070,1215,207,549,592,805,987,1133,568,902,952,544,783,1111,322,1058,1106,118,124,206,253,
            640,756,154,733,879,953,1003,1510,499,552,883,208,261,437,428,531,728,]
    count = len(f1.readlines())
    print("读入拆分后地文件行数为：",count)
    lines1 = f1.readlines()
    for line in lines1:
       for i in range(count):
           block[0,1]=line.split(",",1)
           d[i]=block[0].Split("*")[1]
           c[i]=block[1].Split(" ").Last()


    f1.close()
    count1=len(d)
    return d,c,profit,weight


def testbage(list,weight_most,value,weight):


    def bag_0_1(weight, value, weight_most):  # return max value
        num = len(weight)
        weight.insert(0, 0)  # 前0件要用
        value.insert(0, 0)  # 前0件要用
        bag = np.zeros((num + 1, weight_most + 1), dtype=np.int32)  # 下标从零开始
        for i in range(1, num + 1):
            for j in range(1, weight_most + 1):
                if weight[i] <= j:
                    bag[i][j] = max(bag[i - 1][j - weight[i]] + value[i], bag[i - 1][j])
                else:
                    bag[i][j] = bag[i - 1][j]
        # print(bag)
        return bag[-1, -1]

    result = bag_0_1(weight, value, weight_most)
    return result




if __name__ == '__main__':
    x=input("请输入文件路径：")
    l=15
    delete_black(x)
    a,b,c,d=CuttingFile()
    #kio=testbage(a, b ,c, d)
   # print(kio)
    print("读入的价值列表为：", c)
    print("读入的重量列表为：",d )
    print("D{0-1} KP数据的最优解为：",l)
#-------------损失函数的收敛曲线图---------------

    n=len(d)
    x=range(n)
    plt.scatter(x,d,color='red',linewidth=3)
    plt.title("Scatter plot of profit and weight")
    plt.xlabel("weight")
    plt.ylabel("profit")
    plt.show()
